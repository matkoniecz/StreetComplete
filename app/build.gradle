plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-android-extensions"
    id "kotlin-kapt"
}

apply from: "updateData.gradle"

android {
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    signingConfigs {
        release
    }

    compileSdkVersion = 29
    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    defaultConfig {
        applicationId = "de.westnordost.streetcomplete"
        minSdkVersion(17)
        targetSdkVersion(29)
        versionCode = 2402
        versionName = "24.1"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled = true
            shrinkResources = true
            // don't use proguard-android-optimize.txt, it is too aggressive, it is more trouble than it is worth
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig = signingConfigs.release
        }
        debug {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            applicationIdSuffix = ".debug"
        }
    }

    lintOptions {
        disable "MissingTranslation"
        abortOnError false
    }
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    def props = new Properties()
    props.load(new FileInputStream(keystorePropertiesFile))
    android.signingConfigs.release.storeFile = file(props["storeFile"])
    android.signingConfigs.release.storePassword = props["storePassword"]
    android.signingConfigs.release.keyAlias = props["keyAlias"]
    android.signingConfigs.release.keyPassword = props["keyPassword"]
}

repositories {
    mavenLocal()
    jcenter()
    maven { url "https://jitpack.io" }
}

configurations {
    // it"s already included in Android
    all*.exclude(group: "net.sf.kxml", module: "kxml2")

    cleanedAnnotations
    compile.exclude(group: "org.jetbrains", module:"annotations")
    compile.exclude(group: "com.intellij", module:"annotations")
    compile.exclude(group: "org.intellij", module:"annotations")
}

ext {
    mockito_version = "2.28.2"
    kotlinx_version = "1.3.8"
    dagger_version = "2.14.1"
}

dependencies {

    // debugging
    debugImplementation("com.squareup.leakcanary:leakcanary-android:2.4")

    // tests
    testImplementation("junit:junit:4.12")
    testImplementation("org.mockito:mockito-core:$mockito_version")
    testImplementation("org.mockito:mockito-inline:$mockito_version")
    testImplementation("org.assertj:assertj-core:2.8.0")

    androidTestImplementation("androidx.test:runner:1.3.0")
    androidTestImplementation("androidx.test:rules:1.3.0")
    androidTestImplementation("org.mockito:mockito-android:$mockito_version")
    androidTestImplementation("org.assertj:assertj-core:2.8.0")

    // dependency injection
    implementation("com.google.dagger:dagger:$dagger_version")
    kapt("com.google.dagger:dagger-compiler:$dagger_version")

    // Android stuff
    implementation("com.google.android.material:material:1.2.1")
    implementation("androidx.core:core-ktx:1.3.1")
    implementation("androidx.appcompat:appcompat:1.2.0")
    implementation("androidx.constraintlayout:constraintlayout:2.0.1")
    implementation("androidx.annotation:annotation:1.1.0")
    implementation("androidx.fragment:fragment-ktx:1.2.5")
    implementation("androidx.preference:preference-ktx:1.1.1")
    implementation("androidx.recyclerview:recyclerview:1.1.0")
    implementation("androidx.viewpager:viewpager:1.0.0")
    implementation("androidx.localbroadcastmanager:localbroadcastmanager:1.0.0")

    // photos
    implementation("androidx.exifinterface:exifinterface:1.3.0")

    // Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_version")

    // scheduling background jobs
    implementation("androidx.work:work-runtime:2.4.0")

    // finding in which country we are for country-specific logic
    implementation("de.westnordost:countryboundaries:1.5")
    // finding a name for a feature without a name tag
    implementation("de.westnordost:osmfeatures-android:1.1")
    // talking with the OSM API
    implementation("de.westnordost:osmapi-overpass:1.1")
    implementation("de.westnordost:osmapi-map:1.2")
    implementation("de.westnordost:osmapi-changesets:1.2")
    implementation("de.westnordost:osmapi-notes:1.1")
    implementation("de.westnordost:osmapi-user:1.1")

    // widgets
    implementation("androidx.viewpager2:viewpager2:1.0.0")
    implementation("me.grantland:autofittextview:0.2.1")
    implementation("org.sufficientlysecure:html-textview:3.9")
    implementation("com.duolingo.open:rtl-viewpager:2.0.0")
    implementation("com.google.android:flexbox:2.0.1")

    // box2d view
    implementation("org.jbox2d:jbox2d-library:2.2.1.1")

    // serialization
    implementation("com.esotericsoftware:kryo:4.0.2")
    implementation("org.objenesis:objenesis:2.6")

    // map and location
    implementation("com.mapzen.tangram:tangram:0.13.0")

    // config files
    implementation("com.esotericsoftware.yamlbeans:yamlbeans:1.15")

    // opening hours parser
    implementation("ch.poole:OpeningHoursParser:0.22.1")
}

